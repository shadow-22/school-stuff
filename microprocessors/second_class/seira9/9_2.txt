.include "m16def.inc"
.org 0x0
rjmp reset
.org 0x10
rjmp ISR_TIMER1_OVF


.DSEG
_tmp_: .byte 2
; ---- OYeio oi?iaoio aaaiiYiui
.CSEG


reset:
ldi r24 , low(RAMEND) ; initialize stack pointer
out SPL , r24
ldi r24 , high(RAMEND)
out SPH , r24

ldi r17 ,(1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4)  
out DDRC ,r17  

ldi r17 ,(1<<TOIE1) ;
out TIMSK ,r17

ldi r24 ,(1<<CS12) | (0<<CS11) | (1<<CS10) ; CK/1024
out TCCR1B ,r24

.org 0x100
ser r16
out ddrb,r16
ser r16
out ddrd,r16


rcall lcd_init

ldi r24,1
rcall lcd_command
ldi r24,low(3)
ldi r25,high(3)
rcall wait_msec
ldi r24,0b00001111
 rcall lcd_command
ldi r24,low(3)
ldi r25,high(3)
rcall wait_msec


get_a:
in r16,pina
cpi r16,0x0
breq get_a

ldi r26,0x85
out TCNT1H ,r26
ldi r26 ,0xee
out TCNT1L ,r26
sei
main:
ldi r24,10
rcall scan_keypad_rising_edge
rcall keypad_to_ascii
cpi r24,0
breq main
mov r18,r24
rcall lcd_data

wait2:
ldi r24,10
rcall scan_keypad_rising_edge
rcall keypad_to_ascii
cpi r24,0
breq wait2
mov r19,r24
rcall lcd_data

wait3:
ldi r24,10
rcall scan_keypad_rising_edge
rcall keypad_to_ascii
cpi r24,0
breq wait3
mov r20,r24
rcall lcd_data
ldi r24,low(500)
ldi r25,high(500)
rcall wait_msec

cpi r18,'B'
brne alarm_on
cpi r19,'1'
brne alarm_on
cpi r20,'3'
brne alarm_on
ldi r17 ,(0<<TOIE1) ;
out TIMSK ,r17

alarm_off:
ldi r17 ,(0<<TOIE1) ;
out TIMSK ,r17
ldi r24,1
rcall lcd_command
ldi r24,low(3)
ldi r25,high(3)
rcall wait_msec
ldi r24,'A'
rcall lcd_data
ldi r24,'L'
rcall lcd_data
ldi r24,'A'
rcall lcd_data
ldi r24,'R'
rcall lcd_data
ldi r24,'M'
rcall lcd_data
ldi r24,' '
rcall lcd_data
ldi r24,'O'
rcall lcd_data
ldi r24,'F'
rcall lcd_data
ldi r24,'F'
rcall lcd_data

jmp get_a

alarm_on:
ldi r17 ,(0<<TOIE1) ;
out TIMSK ,r17
ldi r24,1
rcall lcd_command
ldi r24,low(3)
ldi r25,high(3)
rcall wait_msec
ldi r24,'A'
rcall lcd_data
ldi r24,'L'
rcall lcd_data
ldi r24,'A'
rcall lcd_data
ldi r24,'R'
rcall lcd_data
ldi r24,'M'
rcall lcd_data
ldi r24,' '
rcall lcd_data
ldi r24,'O'
rcall lcd_data
ldi r24,'N'
rcall lcd_data
ser r16
out ddra,r16
out porta,r24
led:
ser r16
out ddrb,r16
out portb,r16
ldi r24,low(200)
ldi r25,high(200)
rcall wait_msec
clr r16
out portb,r16
ldi r24,low(200)
ldi r25,high(200)
rcall wait_msec
jmp led




ISR_TIMER1_OVF:
push r24
push r25
ldi r24,1
rcall lcd_command
ldi r24,low(3)
ldi r25,high(3)
rcall wait_msec
ldi r24,'A'
rcall lcd_data
ldi r24,'L'
rcall lcd_data
ldi r24,'A'
rcall lcd_data
ldi r24,'R'
rcall lcd_data
ldi r24,'M'
rcall lcd_data
ldi r24,' '
rcall lcd_data
ldi r24,'O'
rcall lcd_data
ldi r24,'N'
rcall lcd_data
ser r16
out ddra,r16
out porta,r24
led1:
ser r16
out ddrb,r16
out portb,r16
ldi r24,low(200)
ldi r25,high(200)
rcall wait_msec
clr r16
out portb,r16
ldi r24,low(200)
ldi r25,high(200)
rcall wait_msec
jmp led1

pop r25
pop r24
reti



scan_row:
ldi r25 ,0x08  
back_: 
lsl r25 
dec r24
brne back_
out PORTC ,r25 
nop
nop 
in r24 ,PINC 
andi r24 ,0x0f 
ret 
;================================================================================
scan_keypad:
ldi r24 ,0x01
rcall scan_row
swap r24 
mov r27 ,r24 
ldi r24 ,0x02 
rcall scan_row
add r27 ,r24 
ldi r24 ,0x03
rcall scan_row
swap r24 
mov r26 ,r24 
ldi r24 ,0x04 
rcall scan_row
add r26 ,r24 
movw r24 ,r26 
ret

;=====================================================================================
keypad_to_ascii: 
movw r26 ,r24 
ldi r24 ,'*'
sbrc r26 ,0
ret
ldi r24 ,'0'
sbrc r26 ,1
ret
ldi r24 ,'#'
sbrc r26 ,2
ret
ldi r24 ,'D'
sbrc r26 ,3 
ret 
ldi r24 ,'7'
sbrc r26 ,4
ret
ldi r24 ,'8'
sbrc r26 ,5
ret
ldi r24 ,'9'
sbrc r26 ,6
ret
ldi r24 ,'C'
sbrc r26 ,7
ret
ldi r24 ,'4' 
sbrc r27 ,0 
ret
ldi r24 ,'5'
sbrc r27 ,1
ret
ldi r24 ,'6'
sbrc r27 ,2
ret
ldi r24 ,'B'
sbrc r27 ,3
ret
ldi r24 ,'1'
sbrc r27 ,4
ret
ldi r24 ,'2'
sbrc r27 ,5
ret
ldi r24 ,'3'
sbrc r27 ,6
ret
ldi r24 ,'A'
sbrc r27 ,7
ret
clr r24
ret

scan_keypad_rising_edge:
mov r22 ,r24 ; a?ie?eaooa oi ?nuii o?eiecneoiiy ooii r22
rcall scan_keypad ; Yeaaia oi ?eceonieuaei aea ?eaoiYiioo aeaeu?oao
push r24 ; eae a?ie?eaooa oi a?ioYeaoia
push r25
mov r24 ,r22 ; eaeoooYncoa r22 ms (oo?eeYo oeiYo 10-20 msec ?io eaein??aoae a?u oii
ldi r25 ,0 ; eaoaoeaoaoo? oio ?eceonieia?io – ?niiiaeUneaea o?eiecneoi?i)
rcall wait_msec
rcall scan_keypad ; Yeaaia oi ?eceonieuaei iaiU eae a?unneoa
pop r23 ; uoa ?e?eona aioai??ioi o?eiecneoiu
pop r22
and r24 ,r22
and r25 ,r23
ldi r26 ,low(_tmp_) ; ounouoa oci eaoUooaoc oui aeaei?o?i ooci
ldi r27 ,high(_tmp_) ; ?nicaiyiaic ee?oc oco nioo?iao ooioo r27:r26
ld r23 ,X+
ld r22 ,X
st X ,r24 ; a?ie?eaooa ooc RAM oc iYa eaoUooaoc
st -X ,r25 ; oui aeaei?o?i
com r23
com r22 ; anao oioo aeaeu?oao ?io Y?ioi «iueeo» ?aocea?
and r24 ,r22
and r25 ,r23
ret

wait_msec:
push r24
push r25
ldi r24,low(998)
ldi r25,high(998)
rcall wait_usec
pop r25
pop r24
sbiw r24,1
brne wait_msec
ret

wait_usec:
sbiw r24,1
nop
nop
nop
nop
brne wait_usec
ret

lcd_init:
ldi r24 ,40 ; ?oai i aeaaeo?o oco lcd onioiaioa?oae ia
ldi r25 ,0 ; nayia aeoaea? oci aee? oio an?eei?i?coc.
rcall wait_msec ; Aiaiii? 40 msec iY?ne aoo? ia ieieecnuea?.
ldi r24 ,0x30 ; aioie? iaoUaaoco oa 8 bit mode
out PORTD ,r24 ; a?aea? aai i?iniyia ia a?iaooa aYaaeie
sbi PORTD ,PD3 ; aea oc aeaiunouoc aeouaio oio aeaaeo?
cbi PORTD ,PD3 ; oco ieuico, c aioie? a?iooYeeaoae ayi oinYo
ldi r24 ,39
ldi r25 ,0 ; aUi i aeaaeo?o oco ieuico an?oeaoae oa 8-bit mode
rcall wait_usec ; aai ea ooiaa? o??ioa, aeeU ai i aeaaeo?o Y?ae aeaiunouoc
; aeouaio 4 bit ea iaoaaa? oa aeaiunouoc 8 bit
ldi r24 ,0x30
out PORTD ,r24
sbi PORTD ,PD3
cbi PORTD ,PD3
ldi r24 ,39
ldi r25 ,0
rcall wait_usec
ldi r24 ,0x20 ; aeeaa? oa 4-bit mode
out PORTD ,r24
sbi PORTD ,PD3
cbi PORTD ,PD3
ldi r24 ,39
ldi r25 ,0
rcall wait_usec
ldi r24 ,0x28 ; a?eeia? ?anaeo?nui iaaYeioo 5x8 eioe?aui
rcall lcd_command ; eae aioUieoc ayi anaii?i ooci ieuic
ldi r24 ,0x0c ; aianai?i?coc oco ieuico, a?uenooc oio eYnoina
rcall lcd_command
ldi r24 ,0x01 ; eaeaneoiuo oco ieuico
rcall lcd_command
ldi r24 ,low(1530)
ldi r25 ,high(1530)
rcall wait_usec
ldi r24 ,0x06 ; aianai?i?coc aoouiaoco ayicoco eaoU 1 oco aeayeoioco
rcall lcd_command ; ?io a?iae a?ieceaoiYic ooii iaonco? aeaoeyioaui eae
; a?aianai?i?coc oco ie?oecoco ieueecnco oco ieuico
ret

lcd_command:
push r24
cbi PORTD ,PD2 ; a?eeia? oio eaoa?unco? aioie?i (PD2=1)
rcall write_2_nibbles ; a?iooie? oco aioie?o eae aiaiii? 39isec
ldi r24 ,39 ; aea oci ieiee?nuoc oco aeoYeaoco oco a?u oii aeaaeo? oco lcd.
ldi r25 ,0 ; OCI.: o?Un?ioi ayi aioieYo, ie clear display eae return home,
rcall wait_usec ; ?io a?aeoiyi ociaioeeU iaaaeyoani ?niieeu aeUoocia.
pop r24
ret

lcd_data:
push r24
sbi PORTD ,PD2 ; a?eeia? oio eaoa?un?oc aaaiiYiui (PD2=1)
rcall write_2_nibbles ; a?iooie? oio byte
ldi r24 ,43 ; aiaiii? 43isec iY?ne ia ieieecnuea? c e?oc
ldi r25 ,0 ; oui aaaiiYiui a?u oii aeaaeo? oco lcd
rcall wait_usec
pop r24
ret

write_2_nibbles:
push r24 ; ooYeiae oa 4 MSB
in r25 ,PIND ; aeaaU?iioae oa 4 LSB eae oa iaiaooYeiioia
andi r25 ,0x0f ; aea ia ici ?aeUoioia oci u?iea ?nicaiyiaic eaoUooaoc
andi r24 ,0xf0 ; a?iiii?iiioae oa 4 MSB eae
add r24 ,r25 ; ooiaoU?iioae ia oa ?niu?Un?iioa 4 LSB
out PORTD ,r24 ; eae a?iiioae ooci Yiiai
sbi PORTD ,PD3 ; acieionaa?oae ?aeiuo Enable ooii aeniaYeoc PD3
cbi PORTD ,PD3 ; PD3=1 eae iaoU PD3=0
pop r24 ; ooYeiae oa 4 LSB. AiaeoUoae oi byte.
swap r24 ; aiaeeUooiioae oa 4 MSB ia oa 4 LSB
andi r24 ,0xf0 ; ?io ia oci oaenU oioo a?iooYeeiioae
add r24 ,r25
out PORTD ,r24
sbi PORTD ,PD3 ; IYio ?aeiuo Enable
cbi PORTD ,PD3
ret
